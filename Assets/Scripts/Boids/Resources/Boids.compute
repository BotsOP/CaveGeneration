#pragma kernel PrepBoids
#pragma kernel MoveBoids
#pragma kernel MoveBoidsAndRaycast
#pragma kernel CopyAppendToStructured
#define GROUP_SIZE 512

struct Boid
{
	float3 position;
	float3 direction;
	float health;
};
struct BoidVel
{
	int3 separation;
	int neighbourCount;
};

RWStructuredBuffer<Boid> boidsBuffer;
RWStructuredBuffer<BoidVel> boidsVelBuffer;
RWStructuredBuffer<int> playerHitBuffer;
RWStructuredBuffer<int> boidsHitBuffer;
Texture3D<float4> vectorField;

float time;
float deltaTime;
float rotationSpeed;
float boidSpeed;
float boidSpeedVariation;
float3 flockPosition;
float neighbourDistance;
int boidsCount;
int floatPrecession;
float seperationForce;
float alignmentForce;
float cohesionForce;
float pathFindForce;
float3 bottomLeftVectorFieldCorner;
float3 playerPos;
float respawnWidth;
int chunkSize;

float3 rayOrigin;
float3 rayDirection;
float boidRadius;
float gunDamage;
float gunRange;

float hash13(float3 p3)
{
	p3  = frac(p3 * .1031);
	p3 += dot(p3, p3.zyx + 31.32);
	return frac((p3.x + p3.y) * p3.z);
}


float3 newRespawnPos(float3 p3)
{
	p3 = frac(p3 * float3(.1031, .1030, .0973));
	p3 += dot(p3, p3.yxz+33.33);
	float3 rand = frac((p3.xxy + p3.yxx)*p3.zyx);
	
	float3 respawnPos;
	
	respawnPos.y = rand.y * (chunkSize * 2 - respawnWidth * 2) + respawnWidth;

	if(hash13(p3) < 0.5)
	{
		respawnPos.x = rand.x * chunkSize * 3;
		if(respawnPos.x > respawnWidth && respawnPos.x < chunkSize * 3 - respawnWidth)
		{
			float extraZPos = (int)(rand.z * 2) * (chunkSize * 3 - respawnWidth);
			respawnPos.z = rand.z * respawnWidth + extraZPos;
			return respawnPos;
		}
		respawnPos.z = rand.z * chunkSize * 3;
		return respawnPos;
	}
	
	respawnPos.z = rand.z * chunkSize * 3;
	if(respawnPos.z > respawnWidth && respawnPos.z < chunkSize * 3 - respawnWidth)
	{
		float extraZPos = (int)(rand.x * 2) * (chunkSize * 3 - respawnWidth);
		respawnPos.x = rand.x * respawnWidth + extraZPos;
		return respawnPos;
	}
	respawnPos.x = rand.x * chunkSize * 3;
	return respawnPos;
}

bool LineSphereIntersection(float3 lineOrigin, float3 lineDirection, float3 spherePosition, float sphereRadius, out float3 closestPoint)
{
	float3 lineToSphere = spherePosition - lineOrigin;
	float tc = dot(lineToSphere, lineDirection);
    
	if (tc < 0.0)
	{
		closestPoint = float3(0, 0, 0);
		return false;
	}
    
	float dSquared = dot(lineToSphere, lineToSphere) - tc * tc;
	float radiusSquared = sphereRadius * sphereRadius;
    
	if (dSquared > radiusSquared)
	{
		closestPoint = float3(0, 0, 0);
		return false;
	}
    
	float t1c = sqrt(radiusSquared - dSquared);
	float t1 = tc - t1c;
	//float t2 = tc + t1c;
    
	closestPoint = lineOrigin + lineDirection * t1;
	return true;
}

[numthreads(32,32,1)]
void PrepBoids (uint3 id : SV_DispatchThreadID)
{
	if(id.x == id.y)
		return;
	
	Boid boid = boidsBuffer[id.x];
	Boid neighbourBoid = boidsBuffer[id.y];
	float dist = distance(boid.position, neighbourBoid.position);
	if(dist < neighbourDistance)
	{
		dist = max(dist, 0.000001);//Avoid division by zero
		float3 separation = -((boid.position - neighbourBoid.position) * (1.0 / dist - 1.0 / neighbourDistance));

		InterlockedAdd(boidsVelBuffer[id.y].separation.x, separation.x * floatPrecession);
		InterlockedAdd(boidsVelBuffer[id.y].separation.y, separation.y * floatPrecession);
		InterlockedAdd(boidsVelBuffer[id.y].separation.z, separation.z * floatPrecession);
		
		// InterlockedAdd(boidsVelBuffer[id.y].alignment.x, neighbourBoid.direction.x * floatPrecession);
		// InterlockedAdd(boidsVelBuffer[id.y].alignment.y, neighbourBoid.direction.y * floatPrecession);
		// InterlockedAdd(boidsVelBuffer[id.y].alignment.z, neighbourBoid.direction.z * floatPrecession);

		InterlockedAdd(boidsVelBuffer[id.y].neighbourCount, 1);
	}
}

[numthreads(GROUP_SIZE,1,1)]
void MoveBoids (uint3 id : SV_DispatchThreadID)
{
	uint instanceId = id.x;
	Boid boid = boidsBuffer[instanceId];
	BoidVel boidVel = boidsVelBuffer[instanceId];
	
	if(distance(boid.position, playerPos) < 3)
	{
		boidsBuffer[instanceId].position = newRespawnPos(boid.position * time) + float3(bottomLeftVectorFieldCorner.x, 0, bottomLeftVectorFieldCorner.z);

		boidsVelBuffer[instanceId].separation = int3(0,0,0);
		boidsVelBuffer[instanceId].neighbourCount = 0;

		InterlockedAdd(boidsHitBuffer[0], 1);
		return;
	}
	
	float3 currentVectorPos = boid.position - bottomLeftVectorFieldCorner;
	if(currentVectorPos.x < 0 || currentVectorPos.y < 0 || currentVectorPos.z < 0 ||
		currentVectorPos.x > chunkSize * 3 || currentVectorPos.y > chunkSize * 2 || currentVectorPos.z > chunkSize * 3)
	{
		boidsBuffer[instanceId].position = newRespawnPos(boid.position * time) + bottomLeftVectorFieldCorner;

		boidsVelBuffer[instanceId].separation = int3(0,0,0);
		boidsVelBuffer[instanceId].neighbourCount = 0;
		return;
	}

	float velocity = boidSpeed * (1.0 + 1 * boidSpeedVariation);

	float3 boid_dir = boid.direction;

	float3 separation = boidVel.separation / floatPrecession;
	currentVectorPos = float3(round(currentVectorPos.x), round(currentVectorPos.y), round(currentVectorPos.z));
	float3 pathfind = vectorField[currentVectorPos].xyz;

	float3 direction = separation * seperationForce + pathfind * pathFindForce;

	float ip = exp(-rotationSpeed * deltaTime);
	boid.direction = normalize(lerp(direction, boid_dir, ip));

	boid.position += (boid.direction) * (velocity * deltaTime);

	boidsBuffer[instanceId] = boid;

	boidsVelBuffer[instanceId].separation = int3(0,0,0);
	boidsVelBuffer[instanceId].neighbourCount = 0;
}

AppendStructuredBuffer<float3> boidsBeingHitBuffer;
RWStructuredBuffer<int> amountBoidsBeingHitBuffer;

[numthreads(GROUP_SIZE,1,1)]
void MoveBoidsAndRaycast (uint3 id : SV_DispatchThreadID)
{
	uint instanceId = id.x;
	Boid boid = boidsBuffer[instanceId];
	BoidVel boidVel = boidsVelBuffer[instanceId];

	float3 closestPoint;
	if(LineSphereIntersection(rayOrigin, rayDirection, boid.position, boidRadius, closestPoint) && distance(playerPos, boid.position) < gunRange)
	{
		float3 dirToBoid = normalize(boid.position - playerPos);
		int boidDot = saturate(floor(dot(dirToBoid, rayDirection) * 2));
		// float calcGunDamage = (boidRadius - distance(closestPoint + dirToBoid, boid.position)) / boidRadius;
		// calcGunDamage = calcGunDamage * gunDamage;
		float calcGunDamage = gunDamage;
		boid.health -= calcGunDamage * boidDot;

		boidsBeingHitBuffer.Append(boid.position);
		InterlockedAdd(amountBoidsBeingHitBuffer[0], 1);
		
		if(boid.health <= 0)
		{
			boidsBuffer[instanceId].position = newRespawnPos(boid.position * time) + float3(bottomLeftVectorFieldCorner.x, 0, bottomLeftVectorFieldCorner.z);
			boidsBuffer[instanceId].health = 1;

			boidsVelBuffer[instanceId].separation = int3(0,0,0);
			boidsVelBuffer[instanceId].neighbourCount = 0;

			InterlockedAdd(playerHitBuffer[0], 1);
			return;
		}
	}
	
	if(distance(boid.position, playerPos) < 3)
	{
		boidsBuffer[instanceId].position = newRespawnPos(boid.position * time) + float3(bottomLeftVectorFieldCorner.x, 0, bottomLeftVectorFieldCorner.z);
		boidsBuffer[instanceId].health = 1;

		boidsVelBuffer[instanceId].separation = int3(0,0,0);
		boidsVelBuffer[instanceId].neighbourCount = 0;

		InterlockedAdd(boidsHitBuffer[0], 1);
		return;
	}
	
	float3 currentVectorPos = boid.position - bottomLeftVectorFieldCorner;
	if(currentVectorPos.x < 0 || currentVectorPos.y < 0 || currentVectorPos.z < 0 ||
		currentVectorPos.x > chunkSize * 3 || currentVectorPos.y > chunkSize * 2 || currentVectorPos.z > chunkSize * 3)
	{
		boidsBuffer[instanceId].position = newRespawnPos(boid.position * time) + bottomLeftVectorFieldCorner;

		boidsVelBuffer[instanceId].separation = int3(0,0,0);
		boidsVelBuffer[instanceId].neighbourCount = 0;
		return;
	}

	float velocity = boidSpeed * (1.0 + 1 * boidSpeedVariation);

	float3 boid_dir = boid.direction;

	float3 separation = boidVel.separation / floatPrecession;
	currentVectorPos = float3(round(currentVectorPos.x), round(currentVectorPos.y), round(currentVectorPos.z));
	float3 pathfind = vectorField[currentVectorPos].xyz;

	float3 direction = separation * seperationForce + pathfind * pathFindForce;

	float ip = exp(-rotationSpeed * deltaTime);
	boid.direction = normalize(lerp(direction, boid_dir, ip));
	
	boid.position += (boid.direction) * (velocity * deltaTime);

	boidsBuffer[instanceId] = boid;

	boidsVelBuffer[instanceId].separation = int3(0,0,0);
	boidsVelBuffer[instanceId].neighbourCount = 0;
}

RWStructuredBuffer<float3> boidsBeingHitStruc;
ConsumeStructuredBuffer<float3> boidsBeingHitCons;

[numthreads(128,1,1)]
void CopyAppendToStructured (uint3 id : SV_DispatchThreadID)
{
	boidsBeingHitStruc[id.x] = boidsBeingHitCons.Consume();
}


