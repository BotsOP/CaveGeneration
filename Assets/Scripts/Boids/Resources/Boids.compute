#pragma kernel PrepBoids
#pragma kernel MoveBoids
#define GROUP_SIZE 512

float hash(float n)
{
	return frac(sin(n)*43758.5453);
}

float3 hash33(float3 p3)
{
	p3 = frac(p3 * float3(.1031, .1030, .0973));
	p3 += dot(p3, p3.yxz+33.33);
	float3 rand = frac((p3.xxy + p3.yxx)*p3.zyx);
	
}

// The noise function returns a value in the range -1.0f -> 1.0f 
float noise1(float3 x)
{
	float3 p = floor(x);
	float3 f = frac(x);

	f       = f*f*(3.0-2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
					lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
				lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
					lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}

struct Boid
{
	float3 position;
	float3 direction;
};
struct BoidVel
{
	int3 alignment;
	int3 separation;
	//int3 cohesion;
	int neighbourCount;
};

RWStructuredBuffer<Boid> boidsBuffer;
RWStructuredBuffer<BoidVel> boidsVelBuffer;
Texture3D<float4> vectorField;

float time;
float deltaTime;
float rotationSpeed;
float boidSpeed;
float boidSpeedVariation;
float3 flockPosition;
float neighbourDistance;
int boidsCount;
int floatPrecession;
float seperationForce;
float alignmentForce;
float cohesionForce;
float pathFindForce;
float3 bottomLeftVectorFieldCorner;


[numthreads(32,32,1)]
void PrepBoids (uint3 id : SV_DispatchThreadID)
{
	if(id.x == id.y)
		return;
	
	Boid boid = boidsBuffer[id.x];
	Boid neighbourBoid = boidsBuffer[id.y];
	float dist = distance(boid.position, neighbourBoid.position);
	if(dist < neighbourDistance)
	{
		float3 offset = boid.position - neighbourBoid.position;
		dist = length(offset);
		dist = max(dist, 0.000001);//Avoid division by zero
		float3 separation = -(offset * (1.0 / dist - 1.0 / neighbourDistance));

		InterlockedAdd(boidsVelBuffer[id.y].separation.x, separation.x * floatPrecession);
		InterlockedAdd(boidsVelBuffer[id.y].separation.y, separation.y * floatPrecession);
		InterlockedAdd(boidsVelBuffer[id.y].separation.z, separation.z * floatPrecession);
		
		InterlockedAdd(boidsVelBuffer[id.y].alignment.x, neighbourBoid.direction.x * floatPrecession);
		InterlockedAdd(boidsVelBuffer[id.y].alignment.y, neighbourBoid.direction.y * floatPrecession);
		InterlockedAdd(boidsVelBuffer[id.y].alignment.z, neighbourBoid.direction.z * floatPrecession);

		// InterlockedAdd(boidsVelBuffer[id.y].cohesion.x, neighbourBoid.position.x * floatPrecession);
		// InterlockedAdd(boidsVelBuffer[id.y].cohesion.y, neighbourBoid.position.y * floatPrecession);
		// InterlockedAdd(boidsVelBuffer[id.y].cohesion.z, neighbourBoid.position.z * floatPrecession);

		InterlockedAdd(boidsVelBuffer[id.y].neighbourCount, 1);
	}
}

[numthreads(GROUP_SIZE,1,1)]
void MoveBoids (uint3 id : SV_DispatchThreadID)
{
	uint instanceId = id.x;
	Boid boid = boidsBuffer[instanceId];
	BoidVel boidVel = boidsVelBuffer[instanceId];

	float velocity = boidSpeed * (1.0 + 1 * boidSpeedVariation);

	//float3 boid_pos = boid.position;
	float3 boid_dir = boid.direction;

	float3 separation = boidVel.separation / floatPrecession;
	float3 alignment = boidVel.alignment / floatPrecession;
	//float3 cohesion = boidVel.cohesion / floatPrecession + flockPosition;
	float3 currentVectorPos = boid.position - bottomLeftVectorFieldCorner;
	currentVectorPos = float3(round(currentVectorPos.x), round(currentVectorPos.y), round(currentVectorPos.z));
	float3 pathfind = vectorField[currentVectorPos].xyz;

	int nearbyCount = boidVel.neighbourCount + 1;

	float avg = 1.0 / nearbyCount;
	alignment *= avg;
	//cohesion *= avg;
	//cohesion = normalize(cohesion - boid_pos);

	//float3 direction = alignment * alignment + cohesion * cohesionForce + separation * seperationForce + pathfind * pathFindForce;
	float3 direction = alignment * alignment + separation * seperationForce + pathfind * pathFindForce;

	float ip = exp(-rotationSpeed * deltaTime);
	boid.direction = normalize(lerp(direction, boid_dir, ip));

	boid.position += (boid.direction) * (velocity * deltaTime);

	boidsBuffer[instanceId] = boid;

	boidsVelBuffer[instanceId].separation = int3(0,0,0);
	boidsVelBuffer[instanceId].alignment = int3(0,0,0);
	//boidsVelBuffer[instanceId].cohesion = int3(0,0,0);
	boidsVelBuffer[instanceId].neighbourCount = 0;
}


